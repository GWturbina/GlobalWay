/* jshint esversion: 11 */
/* global web3Manager, contracts, Utils, CONFIG */

class RegistrationManager {
  constructor() {
    this.sponsorId = null;
    this.sponsorAddress = null;
    this.sponsorValid = false;
    this.modalShown = false;
  }

  // üî• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä–∫–∞ ref –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
  async init() {
    console.log('üéØ Initializing RegistrationManager...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä
    const urlParams = new URLSearchParams(window.location.search);
    const refParam = urlParams.get('ref');
    
    if (refParam) {
      console.log('üîó Referral link detected:', refParam);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–æ–Ω—Å–æ—Ä–∞
      this.sponsorId = refParam;
      localStorage.setItem('sponsorId', refParam);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–ø–æ–Ω—Å–æ—Ä–∞
      try {
        const sponsorAddress = await this.getAddressFromId(refParam);
        const sponsorInfo = await contracts.getUserInfo(sponsorAddress);
        
        if (sponsorInfo.isRegistered) {
          this.sponsorValid = true;
          this.sponsorAddress = sponsorAddress;
          console.log('‚úÖ Sponsor validated:', this.formatId(refParam), sponsorAddress);
        } else {
          console.warn('‚ö†Ô∏è Sponsor not registered');
          this.sponsorValid = false;
        }
      } catch (error) {
        console.error('‚ùå Error validating sponsor:', error);
        this.sponsorValid = false;
      }
      
    } else {
      console.log('‚ÑπÔ∏è No referral link found');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage (–º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Ä–∞–Ω—å—à–µ)
      const savedSponsor = localStorage.getItem('sponsorId');
      if (savedSponsor) {
        console.log('üì¶ Found saved sponsor:', savedSponsor);
        this.sponsorId = savedSponsor;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        try {
          const sponsorAddress = await this.getAddressFromId(savedSponsor);
          const sponsorInfo = await contracts.getUserInfo(sponsorAddress);
          
          if (sponsorInfo.isRegistered) {
            this.sponsorValid = true;
            this.sponsorAddress = sponsorAddress;
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è Saved sponsor invalid');
        }
      }
    }
  }

  // üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ID –≤ –∞–¥—Ä–µ—Å
  async getAddressFromId(input) {
    try {
      let userId;
      
      // –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥
      if (input.toUpperCase().startsWith('GW')) {
        // GW0000123 ‚Üí 123
        userId = parseInt(input.replace(/GW/i, ''));
      } else if (/^\d+$/.test(input)) {
        // "123" ‚Üí 123
        userId = parseInt(input);
      } else if (input.startsWith('0x')) {
        // –≠—Ç–æ —É–∂–µ –∞–¥—Ä–µ—Å
        if (Utils.validateAddress(input)) {
          return input;
        } else {
          throw new Error('Invalid address format');
        }
      } else {
        throw new Error('Invalid ID format');
      }
      
      console.log('üîç Getting address for user ID:', userId);
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
      const address = await contracts.getUserAddress(userId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –Ω—É–ª–µ–≤–æ–π –∞–¥—Ä–µ—Å
      if (!address || address === '0x0000000000000000000000000000000000000000') {
        throw new Error('User ID not found');
      }
      
      return address;
      
    } catch (error) {
      console.error('‚ùå Error converting ID to address:', error);
      throw error;
    }
  }

  // üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ID –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  formatId(input) {
    try {
      if (input.toUpperCase().startsWith('GW')) {
        return input.toUpperCase();
      } else if (/^\d+$/.test(input)) {
        const id = parseInt(input);
        return `GW${String(id).padStart(7, '0')}`;
      } else if (input.startsWith('0x')) {
        return Utils.formatAddress(input);
      }
      return input;
    } catch (error) {
      return input;
    }
  }

  // üìã –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  async showRegistrationModal() {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–∫–∞–∑
    if (this.modalShown) {
      console.log('‚ö†Ô∏è Registration modal already shown');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á—ë–Ω
    if (!web3Manager.connected || !web3Manager.address) {
      console.log('‚ö†Ô∏è Wallet not connected, skipping registration modal');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    try {
      const userInfo = await contracts.getUserInfo(web3Manager.address);
      if (userInfo.isRegistered) {
        console.log('‚úÖ User already registered');
        return;
      }
    } catch (error) {
      console.error('‚ùå Error checking registration status:', error);
      return;
    }
    
    this.modalShown = true;
    
    // –°–æ–∑–¥–∞—ë–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.className = 'registration-modal';
    modal.id = 'registrationModal';
    
    if (this.sponsorId && this.sponsorValid) {
      // ‚úÖ –ï–°–¢–¨ –í–ê–õ–ò–î–ù–´–ô –°–ü–û–ù–°–û–† - –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
      modal.innerHTML = this.getAutofilledModalHTML();
    } else {
      // ‚ùå –ù–ï–¢ –°–ü–û–ù–°–û–†–ê - —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
      modal.innerHTML = this.getManualModalHTML();
    }
    
    document.body.appendChild(modal);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    setTimeout(() => {
      modal.classList.add('show');
    }, 10);
    
    this.setupModalEvents(modal);
  }

  // üé® HTML –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –º–æ–¥–∞–ª–∫–∏
  getAutofilledModalHTML() {
    const formattedId = this.formatId(this.sponsorId);
    
    return `
      <div class="registration-modal-overlay">
        <div class="registration-modal-content">
          <div class="registration-icon">üéâ</div>
          
          <div class="registration-header">
            <h2 data-translate="registration.welcome">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GlobalWay!</h2>
          </div>
          
          <div class="registration-body">
            <p class="sponsor-label" data-translate="registration.invitedBy">–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª:</p>
            
            <div class="sponsor-display autofilled">
              <input 
                type="text" 
                id="sponsorInput"
                value="${formattedId}"
                readonly
                class="sponsor-input"
              />
              <span class="status-icon validated">‚úÖ</span>
            </div>
            
            <p class="info-text" data-translate="registration.confirmText">
              –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ
            </p>
          </div>
          
          <div class="registration-footer">
            <button class="btn-primary btn-register" id="confirmBtn">
              <span class="btn-icon">‚úÖ</span>
              <span data-translate="registration.continue">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</span>
            </button>
            <button class="btn-secondary" id="cancelBtn">
              <span class="btn-icon">‚ùå</span>
              <span data-translate="common.cancel">–û—Ç–º–µ–Ω–∞</span>
            </button>
          </div>
        </div>
      </div>
    `;
  }

  // üé® HTML –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
  getManualModalHTML() {
    return `
      <div class="registration-modal-overlay">
        <div class="registration-modal-content">
          <div class="registration-icon">üìù</div>
          
          <div class="registration-header">
            <h2 data-translate="registration.title">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ GlobalWay</h2>
          </div>
          
          <div class="registration-body">
            <p class="sponsor-label" data-translate="registration.enterSponsor">–í–≤–µ–¥–∏—Ç–µ ID –≤–∞—à–µ–≥–æ —Å–ø–æ–Ω—Å–æ—Ä–∞:</p>
            
            <div class="sponsor-display manual">
              <input 
                type="text" 
                id="sponsorInput"
                placeholder="1, 123, GW0001234"
                class="sponsor-input"
                autocomplete="off"
              />
              <span class="status-icon" id="statusIcon"></span>
            </div>
            
            <p class="info-text small" data-translate="registration.idFormats">
              –í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: 1, 123 –∏–ª–∏ GW0001234
            </p>
          </div>
          
          <div class="registration-footer">
            <button class="btn-primary btn-register" id="confirmBtn" disabled>
              <span class="btn-icon">üîí</span>
              <span data-translate="registration.continue">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</span>
            </button>
            <button class="btn-secondary" id="cancelBtn">
              <span class="btn-icon">‚ùå</span>
              <span data-translate="common.cancel">–û—Ç–º–µ–Ω–∞</span>
            </button>
          </div>
        </div>
      </div>
    `;
  }

  // üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  setupModalEvents(modal) {
    const input = modal.querySelector('#sponsorInput');
    const confirmBtn = modal.querySelector('#confirmBtn');
    const cancelBtn = modal.querySelector('#cancelBtn');
    const statusIcon = modal.querySelector('#statusIcon');
    
    // –ï—Å–ª–∏ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ - —Å—Ä–∞–∑—É –∞–∫—Ç–∏–≤–Ω–∞ –∫–Ω–æ–ø–∫–∞
    if (this.sponsorId && this.sponsorValid) {
      confirmBtn.disabled = false;
      confirmBtn.querySelector('.btn-icon').textContent = '‚úÖ';
    } else {
      // –ï—Å–ª–∏ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ - –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –≤–≤–æ–¥–µ
      let validationTimeout;
      
      input.addEventListener('input', async (e) => {
        const value = e.target.value.trim();
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
        clearTimeout(validationTimeout);
        
        if (!value) {
          confirmBtn.disabled = true;
          confirmBtn.querySelector('.btn-icon').textContent = 'üîí';
          if (statusIcon) statusIcon.textContent = '';
          return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if (statusIcon) statusIcon.textContent = '‚è≥';
        confirmBtn.disabled = true;
        confirmBtn.querySelector('.btn-icon').textContent = '‚è≥';
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π (debounce)
        validationTimeout = setTimeout(async () => {
          try {
            // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å
            const sponsorAddress = await this.getAddressFromId(value);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            const sponsorInfo = await contracts.getUserInfo(sponsorAddress);
            
            if (sponsorInfo.isRegistered) {
              // ‚úÖ –í–∞–ª–∏–¥–Ω—ã–π —Å–ø–æ–Ω—Å–æ—Ä
              if (statusIcon) statusIcon.textContent = '‚úÖ';
              confirmBtn.disabled = false;
              confirmBtn.querySelector('.btn-icon').textContent = '‚úÖ';
              this.sponsorAddress = sponsorAddress;
              this.sponsorId = value;
              console.log('‚úÖ Sponsor valid:', this.formatId(value));
            } else {
              // ‚ùå –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
              if (statusIcon) statusIcon.textContent = '‚ùå';
              confirmBtn.disabled = true;
              confirmBtn.querySelector('.btn-icon').textContent = '‚ùå';
              Utils.showNotification('–≠—Ç–æ—Ç ID –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ', 'error');
            }
          } catch (error) {
            // ‚ùå –û—à–∏–±–∫–∞ (ID –Ω–µ –Ω–∞–π–¥–µ–Ω)
            console.error('‚ùå Validation error:', error);
            if (statusIcon) statusIcon.textContent = '‚ùå';
            confirmBtn.disabled = true;
            confirmBtn.querySelector('.btn-icon').textContent = '‚ùå';
            Utils.showNotification('ID –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
          }
        }, 500); // –ó–∞–¥–µ—Ä–∂–∫–∞ 500ms
      });
    }
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    confirmBtn.addEventListener('click', async () => {
      await this.register();
    });
    
    // –û—Ç–º–µ–Ω–∞
    cancelBtn.addEventListener('click', () => {
      this.closeModal(modal);
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
    modal.querySelector('.registration-modal-overlay').addEventListener('click', (e) => {
      if (e.target.classList.contains('registration-modal-overlay')) {
        this.closeModal(modal);
      }
    });
  }

  // üöÄ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async register() {
    if (!this.sponsorAddress) {
      Utils.showNotification('–û—à–∏–±–∫–∞: –∞–¥—Ä–µ—Å —Å–ø–æ–Ω—Å–æ—Ä–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω', 'error');
      return;
    }
    
    try {
      Utils.showLoader(true);
      Utils.showNotification('–û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ—à–µ–ª—ë–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...', 'info');
      
      console.log('üìù Registering with sponsor:', this.sponsorAddress);
      console.log('üì± User address:', web3Manager.address);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      const tx = await contracts.contracts.globalway.register(this.sponsorAddress);
      
      console.log('‚úÖ Transaction sent:', tx.hash);
      Utils.showNotification('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...', 'info');
      
      // –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      await tx.wait();
      
      console.log('üéâ Registration successful!');
      Utils.showNotification('üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GlobalWay!', 'success');
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      const modal = document.getElementById('registrationModal');
      if (modal) {
        this.closeModal(modal);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      setTimeout(async () => {
        try {
          await uiManager.loadUserData();
          await uiManager.updateUI();
          console.log('‚úÖ User data refreshed after registration');
        } catch (error) {
          console.error('‚ö†Ô∏è Error refreshing user data:', error);
        }
      }, 2000);
      
    } catch (error) {
      console.error('‚ùå Registration error:', error);
      
      let errorMsg = '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏';
      
      if (error.message.includes('user rejected') || error.message.includes('User denied')) {
        errorMsg = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤ –∫–æ—à–µ–ª—å–∫–µ';
      } else if (error.message.includes('Already registered')) {
        errorMsg = '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã';
      } else if (error.message.includes('Sponsor not registered')) {
        errorMsg = '–°–ø–æ–Ω—Å–æ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω';
      } else if (error.message.includes('Invalid sponsor')) {
        errorMsg = '–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Å–ø–æ–Ω—Å–æ—Ä–∞';
      } else {
        errorMsg = `–û—à–∏–±–∫–∞: ${error.message.substring(0, 80)}`;
      }
      
      Utils.showNotification(errorMsg, 'error');
      
    } finally {
      Utils.showLoader(false);
    }
  }

  // üö™ –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  closeModal(modal) {
    modal.classList.remove('show');
    setTimeout(() => {
      modal.remove();
      this.modalShown = false;
    }, 300);
  }

  // üîß –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  reset() {
    this.sponsorId = null;
    this.sponsorAddress = null;
    this.sponsorValid = false;
    this.modalShown = false;
    localStorage.removeItem('sponsorId');
  }
}

// –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const registrationManager = new RegistrationManager();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
  module.exports = RegistrationManager;
}
