/* jshint esversion: 8 */
/* global CONFIG, Promise, ethers */
// js/web3.js
// Improved Web3Manager with robust SafePal detection and deep-link fallback
// Requirements: ethers (already loaded in index.html), CONFIG object available from js/config.js

class Web3Manager {
  constructor() {
    this.provider = null;
    this.signer = null;
    this.address = null;
    this.connected = false;
    this.isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
    this.isSafePalBrowser = this.detectSafePalBrowser();
    // small safety: allow manual override via config
    if (typeof CONFIG !== 'undefined' && CONFIG.FORCE_SAFEPal_BROWSER === true) {
      this.isSafePalBrowser = true;
    }
  }

  // Robust detection: check userAgent, url, window.safepal, and ethereum.providers array
  detectSafePalBrowser() {
    try {
      const ua = navigator.userAgent || '';
      
       // üî• –ù–û–í–û–ï: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('üîç Detecting SafePal browser...');
      console.log('User-Agent:', ua);
      
       if (ua.includes('SafePal') || ua.includes('safepal')) {
        console.log('‚úÖ SafePal detected via User-Agent');
        return true;
      }
      
      if (window.location.href && window.location.href.includes('safepal')) {
        console.log('‚úÖ SafePal detected via URL');
        return true;
      }
      
      // Some SafePal versions inject as window.safepal OR set flags on window.ethereum
      if (window.safepal) {
        console.log('‚úÖ SafePal detected via window.safepal');
        return true;
      }
      
      if (window.ethereum && (window.ethereum.isSafePal || window.ethereum.isSafePalWallet)) {
        console.log('‚úÖ SafePal detected via window.ethereum flags');
        return true;
      }
      
      // some providers expose multiple providers
      if (window.ethereum && Array.isArray(window.ethereum.providers)) {
        for (const p of window.ethereum.providers) {
           if (p && (p.isSafePal || p.isSafePalWallet || p.isSafePalProvider)) {
            console.log('‚úÖ SafePal detected via ethereum.providers');
            return true;
          }
        }
      }
      
       console.log('‚ö†Ô∏è SafePal NOT detected');
      
    } catch (e) {
       console.warn('SafePal detect error', e);
     }
     return false;
   }

  // Initialize: wait for injected providers and try auto-connect if possible
  async init() {
    console.log('üîå Initializing Web3Manager...');
    console.log('üì± Device:', this.isMobile ? 'Mobile' : 'Desktop');
    console.log('ü¶ä SafePal Browser:', this.isSafePalBrowser);

    // If in SafePal browser, wait a bit longer for injection
    if (this.isSafePalBrowser) {
      console.log('‚è≥ Waiting for SafePal injection (5s max)...');
      await this.waitForSafePal(10000);
      // try to detect provider now
      if (this.hasSafePalProvider()) {
        console.log('‚úÖ SafePal provider detected during init');
        await this.autoConnect();
        return;
      }
    }

    // If saved wallet exists, try autoConnect
    const savedAddress = localStorage.getItem('walletAddress');
    const walletConnected = localStorage.getItem('walletConnected');

    if (savedAddress && walletConnected === 'true') {
      console.log('üîÑ Found saved wallet, attempting auto-connect...');
      await this.autoConnect();
    }
  }

async connect() {
    try {
      console.log('üîå Starting wallet connection...');
      console.log('üì± Device:', this.isMobile ? 'Mobile' : 'Desktop');
      console.log('ü¶ä SafePal Browser:', this.isSafePalBrowser);
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
      if (this.isMobile) {
        console.log('‚è≥ Mobile device - waiting for app readiness...');
        await new Promise(resolve => setTimeout(resolve, 2000));
      } else {
        await new Promise(resolve => setTimeout(resolve, 800));
      }
      
      // –ò—â–µ–º SafePal –ø—Ä–æ–≤–∞–π–¥–µ—Ä
      console.log('üîç Searching for SafePal provider...');
      const safePalFound = await this.waitForSafePal(6000);
      console.log('üîç SafePal found:', safePalFound);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SafePal
      if (this.hasSafePalProvider()) {
        console.log('‚úÖ SafePal provider detected');
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
        await new Promise(resolve => setTimeout(resolve, 800));
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SafePal
        await this.connectSafePal();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å—ë –ø–æ–¥–∫–ª—é—á–∏–ª–æ—Å—å
        if (!this.signer || !this.address) {
          console.error('‚ùå SafePal connected but signer/address missing');
          throw new Error('SafePal connection incomplete. Please try again.');
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –º–æ–±–∏–ª—ã
        if (this.isMobile) {
          console.log('üì± Verifying mobile connection...');
          await new Promise(resolve => setTimeout(resolve, 300));
          
          try {
            const testAddress = await this.signer.getAddress();
            if (!testAddress || testAddress !== this.address) {
              throw new Error('Address mismatch');
            }
            console.log('‚úÖ Mobile connection verified');
          } catch (verifyError) {
            console.error('‚ùå Mobile verification failed:', verifyError.message);
            throw new Error('Mobile wallet verification failed. Please reconnect.');
          }
        }
      }
      // –ú–æ–±–∏–ª–∞ –Ω–æ –Ω–µ –±—Ä–∞—É–∑–µ—Ä SafePal - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
      else if (this.isMobile && !this.isSafePalBrowser) {
        console.log('üì± Mobile but not SafePal browser');
        
        const userConfirmed = confirm(
          'To connect your wallet:\n\n' +
          '1. SafePal app will open\n' +
          '2. Approve connection\n' +
          '3. Return to this page\n\n' +
          'Press OK to continue'
        );
        
        if (!userConfirmed) {
          throw new Error('Connection cancelled');
        }
        
        await this.openSafePalApp();
        throw new Error('Please complete connection in SafePal app and return to this page.');
      }
      // SafePal –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–æ–æ–±—â–µ
      else {
        const message = this.isMobile 
          ? 'SafePal app not detected. Please install SafePal Wallet and open this link in the app.'
          : 'SafePal wallet not detected. Please install SafePal extension.';
        
        throw new Error(message);
      }
      
      // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
      if (!this.provider || !this.signer || !this.address) {
        console.error('‚ùå Connection incomplete');
        throw new Error('Wallet connection failed. Please refresh and try again.');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç—å
      await this.checkNetwork();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      await this.saveConnection();
      
      // –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
      const finalAddress = await this.signer.getAddress();
      if (finalAddress !== this.address) {
        throw new Error('Address mismatch after connection');
      }
      
      this.connected = true;
      
      console.log('‚úÖ Successfully connected:', this.address);
      return this.address;
      
    } catch (error) {
      console.error('‚ùå Connection error:', error.message);
      
      this.connected = false;
      this.signer = null;
      this.address = null;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—Ç–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (!/cancelled|rejected|denied/i.test(error.message || '')) {
        if (error.message.includes('SafePal') || error.message.includes('wallet')) {
          alert(error.message);
        }
      }
      
      throw error;
    }
}
      
      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Priority 2 - Mobile deep link —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UX
      else if (this.isMobile && !this.isSafePalBrowser) {
        console.log('üì± Mobile but not SafePal browser. Triggering SafePal deep-link...');
        
        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–µ—Ä–µ–¥ deep link
        const userConfirmed = confirm(
          'To connect your wallet:\n\n1. SafePal app will open\n2. Approve connection\n3. Return to this page\n4. Click Connect again\n\nPress OK to continue'
        );
        
        if (!userConfirmed) {
          throw new Error('Connection cancelled by user');
        }
        
        await this.openSafePalApp();
        
        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        throw new Error('Please complete connection in SafePal app and return to this page. Then click Connect again.');
      }
      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Priority 3 - Fallback —Å –ª—É—á—à–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
      else {
        const message = this.isMobile 
          ? '‚ùå SafePal app not detected!\n\nPlease install SafePal Wallet from App Store/Play Store and open this link in the app.'
          : '‚ùå SafePal wallet not detected!\n\nDesktop: Install SafePal browser extension\nMobile: Open this link in SafePal Wallet app';
        
        throw new Error(message);
      }
      
      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      if (!this.provider || !this.signer || !this.address) {
        console.error('‚ùå Connection state incomplete:', {
          provider: !!this.provider,
          signer: !!this.signer, 
          address: !!this.address
        });
        throw new Error('Wallet connection incomplete. Please refresh and try again.');
      }
      
      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
      await this.checkNetwork();
      
      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
      await this.saveConnection();
      
      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π connected
      const finalAddress = await this.signer.getAddress();
      if (finalAddress !== this.address) {
        throw new Error('Address mismatch after connection');
      }
      
      this.connected = true;
      
      console.log('‚úÖ Successfully connected:', this.address);
      return this.address;
      
    } catch (error) {
      console.error('‚ùå Connection error:', error);
      
      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      this.connected = false;
      this.signer = null;
      this.address = null;
      
      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª–µ–µ —É–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      if (!/User rejected|User denied|Cancelled|user closed/i.test(error.message || '')) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ—Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
        const errorMsg = error.message || 'Connection failed. Please try again.';
        
        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º alert —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        if (error.message.includes('SafePal') || error.message.includes('wallet') || error.message.includes('connection')) {
          alert(errorMsg);
        } else {
          console.warn('Non-critical connection error:', errorMsg);
        }
      }
      
      throw error;
    }
  }

  // Wait for SafePal provider to be injected (retries until timeout)
  async waitForSafePal(maxWaitTime = 10000) {
    const start = Date.now();
    const interval = 120;
    while (Date.now() - start < maxWaitTime) {
      if (this.hasSafePalProvider()) {
        console.log('‚úÖ Detected SafePal provider after', Date.now() - start, 'ms');
        return true;
      }
      // also detect generic injected ethereum that may have SafePal inside providers
      if (window.ethereum && Array.isArray(window.ethereum.providers)) {
        if (window.ethereum.providers.some(p => p && (p.isSafePal || p.isSafePalWallet))) {
          console.log('‚úÖ Detected SafePal provider inside ethereum.providers');
          return true;
        }
      }
      await new Promise(resolve => setTimeout(resolve, interval));
    }
    console.warn('‚ö†Ô∏è SafePal not found after', maxWaitTime, 'ms');
    return false;
  }

  // Utility: does an available provider look like SafePal?
  hasSafePalProvider() {
    try {
      if (window.safepal) return true;
      if (window.ethereum && (window.ethereum.isSafePal || window.ethereum.isSafePalWallet)) return true;
      if (window.ethereum && Array.isArray(window.ethereum.providers)) {
        return window.ethereum.providers.some(p => p && (p.isSafePal || p.isSafePalWallet || p.isSafePalProvider));
      }
    } catch (e) {
      // ignore
    }
    return false;
  }

  // Connect specifically using SafePal provider
async connectSafePal() {
    try {
      let rawProvider = null;

      if (window.safepal) {
        console.log('‚úÖ Using window.safepal');
        rawProvider = window.safepal;
      } else if (window.ethereum && Array.isArray(window.ethereum.providers)) {
        console.log('üîç Searching SafePal in ethereum.providers');
        rawProvider = window.ethereum.providers.find(p => p && (p.isSafePal || p.isSafePalWallet || p.isSafePalProvider));
      } else if (window.ethereum && (window.ethereum.isSafePal || window.ethereum.isSafePalWallet)) {
        console.log('‚úÖ Using window.ethereum (SafePal detected)');
        rawProvider = window.ethereum;
      }

      if (!rawProvider) {
        throw new Error('SafePal provider not found');
      }

      console.log('üîó Creating ethers provider');
      this.provider = new ethers.providers.Web3Provider(rawProvider);

      console.log('üìù Requesting accounts from SafePal...');
      try {
        await this.provider.send('eth_requestAccounts', []);
      } catch (reqErr) {
        console.warn('eth_requestAccounts failed, trying fallback');
        if (rawProvider.request) {
          await rawProvider.request({ method: 'eth_requestAccounts' });
        } else {
          throw reqErr;
        }
      }

      this.signer = this.provider.getSigner();
      this.address = await this.signer.getAddress();
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      await new Promise(resolve => setTimeout(resolve, 300));

      console.log('‚úÖ SafePal connected:', this.address);
    } catch (error) {
      console.error('‚ùå SafePal connection failed:', error.message);
      throw error;
    }
}

// –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ SafePal —á–µ—Ä–µ–∑ deep-link
async openSafePalApp() {
    try {
      const currentUrl = window.location.href;
      const ua = navigator.userAgent || '';
      const isAndroid = /Android/i.test(ua);
      const isIOS = /iPhone|iPad|iPod/i.test(ua);

      let deepLink;
      let storeLink;

      if (isAndroid) {
        deepLink = `safepalwallet://open?url=${encodeURIComponent(currentUrl)}`;
        storeLink = 'https://play.google.com/store/apps/details?id=io.safepal.wallet';
      } else if (isIOS) {
        deepLink = `safepal://open?url=${encodeURIComponent(currentUrl)}`;
        storeLink = 'https://apps.apple.com/app/safepal-wallet/id1548297139';
      } else {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ SafePal.');
        return;
      }

      console.log('üöÄ Opening SafePal via deep-link');

      alert('SafePal –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Å–µ–π—á–∞—Å.\n\n1. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n2. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É\n3. –ù–∞–∂–º–∏—Ç–µ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –µ—â–µ —Ä–∞–∑');

      window.location.href = deepLink;

      // –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–∫—Ä—ã–ª–æ—Å—å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        if (!this.connected) {
          const install = confirm(
            'SafePal –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω.\n\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SafePal Wallet?\n\n–ù–∞–∂–º–∏—Ç–µ –û–ö —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω.'
          );
          if (install) {
            window.open(storeLink, '_blank');
          }
        }
      }, 3000);
    } catch (e) {
      console.error('Deep-link –æ—à–∏–±–∫–∞:', e.message);
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –µ—Å–ª–∏ –∫–æ—à–µ–ª–µ–∫ —É–∂–µ –±—ã–ª –ø–æ–¥–∫–ª—é—á–µ–Ω
async autoConnect() {
    try {
      console.log('üîÑ –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
      
      if (this.isSafePalBrowser) {
        await this.waitForSafePal(8000);
      } else {
        await new Promise(resolve => setTimeout(resolve, 300));
      }

      let provider = null;

      if (this.hasSafePalProvider()) {
        if (window.safepal) {
          provider = new ethers.providers.Web3Provider(window.safepal);
        } else if (window.ethereum && Array.isArray(window.ethereum.providers)) {
          const p = window.ethereum.providers.find(p => p && (p.isSafePal || p.isSafePalWallet));
          if (p) provider = new ethers.providers.Web3Provider(p);
        } else if (window.ethereum && (window.ethereum.isSafePal || window.ethereum.isSafePalWallet)) {
          provider = new ethers.providers.Web3Provider(window.ethereum);
        }
        console.log('‚úÖ SafePal –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–∞–π–¥–µ–Ω');
      } else if (window.ethereum) {
        provider = new ethers.providers.Web3Provider(window.ethereum);
        console.log('‚úÖ Ethereum –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–∞–π–¥–µ–Ω');
      }

      if (!provider) {
        console.log('‚ö†Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const accounts = await provider.listAccounts();

      if (accounts && accounts.length > 0) {
        this.provider = provider;
        this.signer = provider.getSigner();
        this.address = accounts[0];
        this.connected = true;
        await this.checkNetwork();
        console.log('‚úÖ –ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:', this.address);
      } else {
        console.log('‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    } catch (error) {
      console.error('‚ùå –ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—à–∏–±–∫–∞:', error.message);
    }
}

  // Check current network and try to switch/add opBNB if necessary
  async checkNetwork() {
    try {
      if (!this.provider) throw new Error('No provider to check network');
      const network = await this.provider.getNetwork();
      console.log('üåê Network:', network.chainId, network.name);

      // CONFIG.NETWORK.chainId should be numeric and .chainIdHex the hex string.
      if (typeof CONFIG === 'undefined' || !CONFIG.NETWORK) {
        console.warn('CONFIG.NETWORK not found ‚Äî skipping network checks');
        return;
      }

      const desiredChainId = Number(CONFIG.NETWORK.chainId);
      if (network.chainId !== desiredChainId) {
        console.log('‚ö†Ô∏è Wrong network, trying to switch to opBNB...');
        await this.switchNetwork();
      } else {
        console.log('‚úÖ Already on desired network (opBNB)');
      }
    } catch (error) {
      console.error('‚ùå Network check failed:', error);
      throw error;
    }
  }

  // Switch network (wallet_switchEthereumChain) or add it if missing
  async switchNetwork() {
    try {
      if (!this.provider) throw new Error('No provider to switch network');

      const chainIdHex = CONFIG.NETWORK.chainIdHex || '0x' + Number(CONFIG.NETWORK.chainId).toString(16);

      await this.provider.send('wallet_switchEthereumChain', [{ chainId: chainIdHex }]);
      console.log('‚úÖ Network switch requested');
    } catch (error) {
      // 4902 = chain not added
      if (error && error.code === 4902) {
        console.log('‚ûï Chain not found in wallet. Trying to add network...');
        await this.addNetwork();
      } else {
        console.error('‚ùå Switch failed:', error);
        throw new Error('Please switch to opBNB manually in your wallet');
      }
    }
  }

  // Add opBNB network to wallet
  async addNetwork() {
    try {
      if (!this.provider) throw new Error('No provider to add network');

      const chainIdHex = CONFIG.NETWORK.chainIdHex || '0x' + Number(CONFIG.NETWORK.chainId).toString(16);

      await this.provider.send('wallet_addEthereumChain', [{
        chainId: chainIdHex,
        chainName: CONFIG.NETWORK.name,
        nativeCurrency: CONFIG.NETWORK.currency,
        rpcUrls: [CONFIG.NETWORK.rpcUrl],
        blockExplorerUrls: [CONFIG.NETWORK.explorer]
      }]);
      console.log('‚úÖ Network added to wallet');
    } catch (error) {
      console.error('‚ùå Add network failed:', error);
      throw new Error('Please add opBNB network manually in your wallet');
    }
  }

  // Persist user wallet address/flag locally
  async saveConnection() {
    try {
      if (this.address) {
        localStorage.setItem('walletAddress', this.address);
        localStorage.setItem('walletConnected', 'true');
        console.log('üíæ Connection saved to localStorage');
      }
    } catch (e) {
      console.warn('Failed to save connection', e);
    }
  }

  // full disconnect: clear provider and local storage
  async disconnect() {
    this.provider = null;
    this.signer = null;
    this.address = null;
    this.connected = false;

    try {
      localStorage.removeItem('walletAddress');
      localStorage.removeItem('walletConnected');
    } catch (e) {
      // ignore
    }

    try {
      // Do not clear whole localStorage by default (it may break other app data).
      // But preserve compatibility: if CONFIG.CLEAR_ON_DISCONNECT is true, clear all.
      if (typeof CONFIG !== 'undefined' && CONFIG.CLEAR_ON_DISCONNECT === true) {
        localStorage.clear();
      }
    } catch (e) {
      // ignore
    }

    console.log('üîå Disconnected & local state cleared');
  }

  // Get ETH/BNB balance string
  async getBalance() {
    if (!this.connected || !this.provider || !this.address) return '0';
    try {
      const bal = await this.provider.getBalance(this.address);
      return ethers.utils.formatEther(bal);
    } catch (error) {
      console.error('‚ùå Balance fetch error', error);
      return '0';
    }
  }

  // Return contract instance using signer
  getContract(name, abi) {
    if (!this.signer) {
      throw new Error('Wallet not connected');
    }
    if (!CONFIG.CONTRACTS || !CONFIG.CONTRACTS[name]) {
      throw new Error(`Contract ${name} address not found in CONFIG.CONTRACTS`);
    }
    return new ethers.Contract(CONFIG.CONTRACTS[name], abi, this.signer);
  }

  // Helpers for roles
  isAdmin() {
    if (!this.address || !CONFIG.ADMIN) return false;
    const addr = this.address.toLowerCase();
    if (CONFIG.ADMIN.owner && addr === CONFIG.ADMIN.owner.toLowerCase()) return true;
    if (Array.isArray(CONFIG.ADMIN.founders) && CONFIG.ADMIN.founders.some(f => f.toLowerCase() === addr)) return true;
    if (Array.isArray(CONFIG.ADMIN.board) && CONFIG.ADMIN.board.some(b => b.toLowerCase() === addr)) return true;
    return false;
  }

  isOwner() {
    if (!this.address || !CONFIG.ADMIN) return false;
    const result = CONFIG.ADMIN.owner && this.address.toLowerCase() === CONFIG.ADMIN.owner.toLowerCase();
    console.log('üîç isOwner check:', this.address, '‚Üí', result);
    return result;
  }

  isFounder() {
    if (!this.address || !CONFIG.ADMIN) return false;
    const addr = this.address.toLowerCase();
    const result = this.isOwner() || (Array.isArray(CONFIG.ADMIN.founders) && CONFIG.ADMIN.founders.some(f => f.toLowerCase() === addr));
    console.log('üîç isFounder check:', this.address, '‚Üí', result);
    console.log('üìã Founders list:', CONFIG.ADMIN.founders);
    return result;
  }
  }

// single global instance for your app to use
const web3Manager = new Web3Manager();
